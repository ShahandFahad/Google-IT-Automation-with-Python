#!/usr/bin/env python3

import json
import locale
import sys

import emails
import os
import reports

"""
  Wrote this script and was working fine. Generating pdf and sending mail.
  But did not pass.
"""

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_car_sales = {"max_sales": 0}
  yearly_sales = {}
  most_popular_year = {"year":0}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales

    # print(item['id'], end=' ')
    # print(item['car']['car_model'], end=' ')
    # print(int(item['total_sales']))

    # find max sale and add to dictionary
    # then add car attribute as whole to dictionary

    each_car_sale = int(item['total_sales'])

    if each_car_sale > max_car_sales["max_sales"]:
        max_car_sales["max_sales"] = each_car_sale
        max_car_sales["car"] = item["car"]

    # TODO: also handle most popular car_year
    # Count each year sales
    if item['car']['car_year'] not in yearly_sales:
        yearly_sales[item['car']['car_year']] = item['total_sales']
    yearly_sales[item['car']['car_year']] += item['total_sales']
    # print(item['id'],item['car']['car_year'], item['total_sales'])
#   print(yearly_sales)
# Get max yearly sales through
  max_sale_year = max(yearly_sales, key=yearly_sales.get)
#   Store it in sperate dictionary
  most_popular_year["year"] = max_sale_year
  most_popular_year["sales"] = yearly_sales[max_sale_year]
#   print("Maximum value = ",max_sale_year, yearly_sales[max_sale_year])

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: ${}".format(
      format_car(max_car_sales["car"]), max_car_sales["max_sales"]),
    "The most popular year was {} with {} sales.".format(most_popular_year["year"], most_popular_year["sales"]),
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  reports.generate('/tmp/cars.pdf', "Sale Summary for Last Month", "{} <br/> {} <br/> {}".format(summary[0], summary[1], summary[2]), cars_dict_to_table(data))
  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = "{}\n{}\n{}".format(summary[0], summary[1], summary[2])

  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)


if __name__ == "__main__":
  main(sys.argv)
