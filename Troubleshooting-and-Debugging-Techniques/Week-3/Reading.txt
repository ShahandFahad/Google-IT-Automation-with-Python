Crashing Programs
    In this module, you’ll get introduced to the age old question, “Why has my program crashed?” You’ll learn how to troubleshoot system crashes and application crashes, what tools can be used to help identify the cause of the crash, and what log files to look at in order to find what might have gone wrong. Next, you’ll dive into investigating why code crashes, and what you can do to prevent that from happening. Then, you’ll explore what happens when an unhandled error occurs and throws an exception. You’ll learn about the printf debugging technique, which will help you identify these errors and exceptions. Finally, you’ll explore the concept of handling crashes and incidents at a much larger scale. You’ll delve into a scenario where a large eCommerce site will throw an error 20% of the time. Once that issue has been fixed, you’ll understand the importance of communication and documentation during these incidents, and how writing a post mortem can prevent issues from happening again.

Learning Objectives
    Understand the difference between system and application crashes
    Utilize skills in debugging and log reading to identify these crashes
    Understand the different types of code crashes and be able to address invalid memory errors
    Utilize techniques, like printf debugging, to troubleshoot and resolve unhandled errors and exceptions
    Understand how communication and documentation during an outage or error is critical
    Understand what a postmortem is and what should be included in 


Why Programs Crash?
    Unhandeled exception, hardware faults etc.

    Checking Status
        Linux: Error logs
        Window: Evenet Viewer
    Checking Info
        Strace(Linux)
        Process Monitor(Window)


To find the root cause of a crashing application will want to look at all available logs figure out what changed trace the system or library calls the program makes and create the smallest possible reproduction case.

Wrapper:
    A wrapper is a function or program that provides a compatibility layer between two functions or programs.  

WatchDog:
     A watchdog is one workaround, as it will check whether a program is running and start it again if it stops. Using a container would be a better workaround, though.  


XML Format
    XML is a data format that is applicable to data input and output of a program

Container
    A container allows the application to run in its own environment without interfering with the rest of the system.  



Internal Server Error

The /etc directory will contain the application folder that stores configuration files.  