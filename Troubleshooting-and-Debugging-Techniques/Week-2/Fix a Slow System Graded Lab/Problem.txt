Fix a slow system with Python
    Introduction
        You're an IT administrator for a media production company that uses Network-Attached Storage (NAS) to store all data generated daily (e.g., videos, photos). One of your daily tasks is to back up the data in the production NAS (mounted at /data/prod on the server) to the backup NAS (mounted at /data/prod_backup on the server). A former member of the team developed a Python script (full path /scripts/dailysync.py) that backs up data daily. But recently, there's been a lot of data generated and the script isn't catching up to the speed. As a result, the backup process now takes more than 20 hours to finish, which isn't efficient at all for a daily backup.

    What you'll do
        Identify what limits the system performance: I/O, Network, CPU, or Memory
        Use rsync command instead of cp to transfer data
        Get system standard output and manipulate the output
        Find differences between threading and multiprocessing


    User exercise
        Now that you understand how multiprocessing works, let's fix CPU bound so that it doesn't take more than 20 hours to finish. Try applying multiprocessing, which takes advantage of the idle CPU cores for parallel processing.

        Open the dailysync.py Python script in the nano editor that needs to be modified. It's similar to multisync.py that utilizes idle CPU cores for the backup.

            nano ~/scripts/dailysync.py

        Here, you have to use multiprocessing and subprocess module methods to sync the data from /data/prod to /data/prod_backup folder.

            Hint: os.walk() generates the file names in a directory tree by walking the tree either top-down or bottom-up. This is used to traverse the file system in Python.
        Once you're done writing the Python script, save the file by clicking Ctrl-o, the Enter key, and Ctrl-x.

        Now, grant the executable permission to the dailysync.py Python script for running this file.

            sudo chmod +x ~/scripts/dailysync.py
        Run the dailysync.py Python script:

            ./scripts/dailysync.py