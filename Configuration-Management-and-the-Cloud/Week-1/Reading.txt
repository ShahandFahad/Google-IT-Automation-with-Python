Automating with Configuration Management
    In this module, you’ll be introduced to the concept of automation at scale and how it can be successfully achieved. You’ll learn what it means to work at scale and how automation is needed to scale effectively. Next, you’ll be introduced to configuration management. You’ll learn the differences between unmanaged and managed configuration management. Then, you’ll dive into infrastructure as code and learn about the benefits it brings, like making your fleet of nodes more reliable and repeatable. This is a major benefit when managing systems at scale. In the next lesson, you’ll be introduced to Puppet. You’ll learn how to apply basic configuration management and how Puppet agents and masters interact with each other. Next, you’ll do a rundown of Puppet resources and classes. You’ll learn how resources are basic units for modeling your configurations and how classes are a collection of resources used to achieve a single goal. The final lesson will introduce you to the building blocks of domain-specific language. You’ll learn what Puppet facts are and how it uses a program called Facter to analyze, store and gather this information. Your final lesson will cover the driving principles of configuration management. You’ll learn about declarative, procedural, and idempotent principals and how they differ from each other.
Learning Objectives
    Understand the definition of working at scale and how automation is an essential tool
    Understand the difference between unmanaged and managed configuration systems
    List the benefits of infrastructure as code
    Understand what Puppet is and how Puppet facts work
    Understand what Puppet resources and classes are
    Define the principles of configuration management


Introduction to Automation at Scale

    What is Scale?
        Being able to scale what we do means that we can keep achieving larger impacts with the same amount of effort when a system scales. 

    What is Configuration Management?
        It means using a configuration management system to handle all of the configuration of the devices in your fleet, also known as nodes. 
        Example: Puppet (Industry Standard)

    What is Infrastructure as code?
        The paradigm of storing all the configuration for the managed devices in version controlled files is known as Infrastructure as Code or IaC. 

        When all of the configuration necessary to deploy and manage a node in the infrastructure is stored in version control. 

Introduction to Puppet
    Cross Platform tool. Puppet Enables you to deploy and manage infrastructure with confidence.

    Puppet Resources:
        In puppet, resources are the basic unit for modeling the configuration that we want to manage. 

        The most basic unit in Puppet is a resource, such as user, group, file, service or package.

        # Syntax
            class resource {
                file { 'etc':
                    attribute1 => property,
                    attribute2 => property,
                }
            }

    Puppet Classes
    Group related resources
    ###
    # ntp (network time protocol) 
        class ntp {
            package { 'ntp' :
                ensure => latest,
            }
            file {'etc/ntp.conf':
                source => 'puppet:///modules/ntp/ntp.conf'
                replace => true,
            }
            service {'ntp':
                enable => true,
                ensure => running,
            }
        }

    ### 
    By grouping related resources together, we can more easily understand the configuration and make changes in the future.

    ### Quiz ANS:


        Q1 -> Option 2. The Portage package manager used by Gentoo Linux is the provider called by the Puppet agent.  


        Q2 -> Option: 1
        class AutoConfig {
            package { 'Executable':
                ensure => latest,
            }
            file { 'executable.cfg':
                source => 'puppet:///modules/executable/Autoconfig/executable.cfg'
                replace => true,
            }
            service { 'executable.exe':
                enable  => true,
                ensure  => running,
            }
        }

        The AutoConfig class has all its resources grouped together using proper Puppet syntax.  
        Q3 -> Option 1:
            Grouping a collection of related resources into a single class simplifies configuration management by, for one example, allowing us to apply a single class to each host rather than having to specify every resource for each host separately and possibly missing some

        Q4 -> Option 1:
            Puppet assigns providers according to predefined rules for the resource type and data collected from the system such as the family of the underlying operating system

        Q5 -> Option 3:
            Puppet has many useful attributes. "Replace" set to True tells Puppet to replace files or symlinks that already exist on the local system but whose content doesn’t match what the source or content attribute specifies.

        
        